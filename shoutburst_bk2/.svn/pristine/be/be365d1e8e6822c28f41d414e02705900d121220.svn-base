<?php

$script_location = dirname(__FILE__);
require_once($script_location . DIRECTORY_SEPARATOR . 'mycurl.php');

// Setting max execution time to 10 minutes
ini_set('max_execution_time', 600);

class CallManagerRecordScraperException extends Exception {
        public function __toString() {
                return "Error while scraping record from Call Manager: [{$this->code}]. {$this->message}\n";
        }
}

class CallManagerRecordScraper {
        // TODO : make a recursive mkdir for downloads dir

        // Names for login form fields
        protected $login_input_name = 'j_username';
        protected $pass_input_name = 'j_password';

        // Login and password for Call Manager
        protected $login = 'ptEnhanced';
        protected $pass = 'ptadmin#';

        protected $last_login_file = 'cm_login';

        // Url to Call Manager
        protected $url = 'https://callmanager.virginmediabusiness.co.uk/effectiveL/';

        // Relative pathes to login page and page where can find list of records
        protected $login_page = 'j_acegi_security_check';
        protected $record_list_page = 'resources.recordings.form';

        protected $record_file_download_form_action = 'resources.recordings.form';

        // Get request to page with list records to change a page
        // %page% - replace this with page number - 1
        protected $page_get_request = '?page[%page%]&formname=icon';

        // Temporary directory to store downloaded record
        protected $tmp_wav_dir = 'cmaudiofiles';

        // Date search criteria
        protected $search_date = '';

        // Cli search criteria
        protected $search_cli = '';

        // Plan search criteria
        protected $search_plan = '';

        // Stores data from last search
        protected $last_search = array( 'data' => array (
                                                                                'RoutePlan' => '',
                                                                                'file_name' => '',
                                                                                'duration' => '',
                                                                                'CLI' => '',
                                                                                'Time/Date' => ''
                                                                                ),
                                                                        'file' => ''
                                                                );

        protected $curl_object;

        protected $load_cookies = FALSE;

        /** __construct
         *
         *  Passing all parameters to constructor
         *
         *  @returns null
         */
        public function __construct( $search_cli,
                                                  $search_date,
                                                  $search_plan,
                                                  $tmp_wav_dir = '',
                                                  $url = '',
                                                  $login = '',
                                                  $pass = '',
                                                  $login_page = '',
                                                  $record_list_page = '',
                                                  $record_file_download_form_action = '',
                                                  $page_get_request = '')
        {
                $this->search_cli = $search_cli;
                $this->search_date = $search_date;
                $this->search_plan = $search_plan;

                if (!empty($url)) {
                        $this->url = $url;
                }

                if (!empty($login)) {
                        $this->login = $login;
                }
                $last_login = file_get_contents(dirname(__FILE__). '/'.$this->last_login_file);
                if ($last_login == $login) {
                        $this->load_cookies = TRUE;
                }

                if (!empty($pass)) {
                        $this->pass = $pass;
                }

                if (!empty($login_page)) {
                        $this->login_page = $login_page;
                }

                if (!empty($record_list_page)) {
                        $this->record_list_page = $record_list_page;
                }

                if (!empty($record_file_download_form_action)) {
                        $this->record_file_download_form_action = $record_file_download_form_action;
                }

                if (!empty($tmp_wav_dir)) {
                        $this->tmp_wav_dir = $tmp_wav_dir;
                }

                if (!empty($page_get_request)) {
                        $this->page_get_request = $page_get_request;
                }

                $this->curl_object = new Mycurl($this->url, TRUE, 30, 10, FALSE, TRUE, FALSE, $this->load_cookies);
        }

        /**
         * log_in
         *
         * Loging in to Call Manager
         * If loging failure returns array with 'error' element
         * Else without it
         *
         * @access public
         * @return array
         */
        public function log_in() {
                $url = $this->url.$this->login_page;
                $post_array = array(
                                                        $this->login_input_name => $this->login,
                                                        $this->pass_input_name => $this->pass
                                                );
                $post_str = $this->login_input_name.'='.$this->login.'&'.$this->pass_input_name.'='.$this->pass;
                if (!$this->curl_object) {
                        $this->curl_object = new Mycurl($this->url, TRUE, 30, 10, FALSE, TRUE, FALSE, $this->load_cookies);
                }

                $this->curl_object->setPost($post_str);
                $this->curl_object->createCurl($url);

                $result = array(
                                                'url' => $url,
                                                'status' => $this->curl_object->getHttpStatus(),
                                                'page' => $this->curl_object->__tostring(),
                                                'cookie' => $this->curl_object->getCookie(),
                                                'last_url' => $this->curl_object->getLastEffectiveUrl()
                                        );
                if (preg_match("/login_error=1/si", $result['last_url'])) {
                        $result['error'] = 'Login failure';
                }
                if ($result['status'] != '200') {
                        if ($result['status'] >= 400) {
                                $result['error'] = 'Wrong login page (page not found)';
                        }
                        else if ($result['status'] >= 300) {
                                if (preg_match("/login_error=1/si", $result['page'])) {
                                        $result['error'] = 'Login failure';
                                }
                        }
                }
                file_put_contents(dirname(__FILE__). '/' . $this->last_login_file, $this->login);
                return $result;
        }

        public function search() {
                $url = $this->url.$this->record_list_page;

                if (!$this->curl_object) {
                        $this->curl_object = new Mycurl($this->url, TRUE, 30, 10, FALSE, TRUE, FALSE, $this->load_cookies);
                }

                $this->curl_object->unsetPost();
                $this->curl_object->unsetFile();
                $this->curl_object->createCurl($url);

                $result = array(
                                                'url' => $url,
                                                'status' => $this->curl_object->getHttpStatus(),
                                                'page' => $this->curl_object->__tostring(),
                                                'cookie' => $this->curl_object->getCookie()
                                        );

                $page = $result['page'];

                $table = $this->grab_records_table($page);

                if (!$table) {
                        $this->log_in();
                }

                $this->curl_object->unsetPost();
                $this->curl_object->unsetFile();
                $this->curl_object->createCurl($url);

                $result = array(
                                                'url' => $url,
                                                'status' => $this->curl_object->getHttpStatus(),
                                                'page' => $this->curl_object->__tostring(),
                                                'cookie' => $this->curl_object->getCookie()
                                        );

                $page = $result['page'];

                $table = $this->grab_records_table($page);

                if (!$table) {
                        $data['error'] = 'Error scraping data. List of records not found';
                        return $data;
                }

                if ($row = $this->find_row($table, $this->search_cli, $this->search_plan)) {
                        $data = $this->scrape_data($row);
                }
                else {
                        $current_page = 2;

                        while ($page = $this->get_page($current_page)) {
                                $table = $this->grab_records_table($page);

                                if (!$table) {
                                        continue;
                                }

                                if ($row = $this->find_row($table, $this->search_cli, $this->search_plan)) {
                                        $data = $this->scrape_data($row);
                                        break;
                                }

                                $current_page++;
                        }
                }

                if (!isset($data)) {
                        $data['error'] = 'Record not found';
                        return $data;
                }
                else {
                        $this->last_search = $data;
                        return $data;
                }

        }

        protected function grab_records_table($page) {
                $result = array();
                // Picking out table that lists records by its header row
                if (preg_match("/<table>.*?<th>Routing Plan<\/th>.*?<th>CLI<\/th>.*?<\/tr>(.*?)<\/table>/si", $page, $result)) {
                        return $result[1];
                }
                else {
                        return FALSE;
                }
        }

        protected function find_row($table, $cli, $plan = FALSE) {
                $result = array();
                // Searching first row that matches by cli
                if ($cli) {
                        if (preg_match("/<tr>(.*?<td.*?>(.*?$cli.*?)<\/td>.*?)<\/tr>/si", $table, $result)) {
                                return $result[1];
                        }
                        else {
                                return FALSE;
                        }
                }
                // Searching for row that matches plan
                else if ($plan) {
                        if (preg_match("/<tr>(.*?<td.*?>(.*?$plan.*?)<\/td>.*?)<\/tr>/si", $table, $result)) {
                                return $result[1];
                        }
                        else {
                                return FALSE;
                        }
                }
                else {
                        return FALSE;
                }
        }

        protected function scrape_data($row) {
                $result = array();
                if (preg_match_all("/<td.*?>(.*?)<\/td>/si", $row, $result)) {
                        $temp = array();
                        $input_name = '';
                        if (preg_match("/name=\"(.*?)\"/si", $result[1][6], $temp)) {
                                $input_name = $temp[1];
                        }

                        $data = array (
                                                        'Routing Plan' => trim($result[1][0]),
                                                        'Filename' => trim($result[1][1]),
                                                        'CLI' => trim($result[1][2]),
                                                        'Record Time' => trim($result[1][3]),
                                                        'Duration' => trim($result[1][4]),
                                                        'Size' => trim($result[1][5]),
                                                        'Input name' => trim($input_name)
                                                );

                        $file = $this->get_file($input_name, $data['Filename']);

                        $data['file'] = $file;

                        return $data;
                }
                else {
                        return FALSE;
                }
        }

        protected function get_page($page) {
                $get_request = $this->page_get_request;

                $page--;

                $get_request = preg_replace("/(%page%)/si", $page, $get_request);

                $url = $this->url.$this->record_list_page.$get_request;
                $this->curl_object->unsetPost();
                $this->curl_object->unsetFile();
                $this->curl_object->createCurl($url);

                $page = $this->curl_object->__tostring();

                return $page;
        }

        protected function get_file($input_name, $filename) {
                $url = $this->url.$this->record_file_download_form_action;
                $post_array = array(
                                                        $input_name => '1'
                                                );
                $post_str = $input_name.'=1';

                if (!$this->curl_object) {
                        $this->curl_object = new Mycurl($this->url, TRUE, 30, 10, FALSE, TRUE, FALSE, $this->load_cookies);
                }

                $this->curl_object->setHeader(FALSE);
                $this->curl_object->setPost($post_str);
                $file = $this->tmp_wav_dir.'/'.$filename;
                $filepath = $file;
                $file = fopen($file.".wav", 'w');
                if (!$file) {
                        throw new CallManagerRecordScraperException("Can't write to file \"$filepath\"");
                }
                $this->curl_object->setFile($file);
                $this->curl_object->createCurl($url);
                fclose($file);
                $this->curl_object->setHeader(TRUE);

                $result = array(
                                                'url' => $url,
                                                'status' => $this->curl_object->getHttpStatus(),
                                                'page' => $this->curl_object->__tostring(),
                                                'cookie' => $this->curl_object->getCookie()
                                        );

                return $result;
        }
}
