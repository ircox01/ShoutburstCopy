<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');
/*
 * @author: Muhammad Sajid
 * @name: Users_model
 */
class Users_model extends CI_Model {

	public function __construct()
	{

	}
	
	/*
	 * @name:	validate
	 * 
	 */
	public function validate()
	{
        // grab user input
        $username = $this->security->xss_clean($this->input->post('email'));
        $password = $this->security->xss_clean($this->input->post('password'));
 
        // Prep the query
        $this->db->from('users u');
		$this->db->join('user_companies uc', 'uc.user_id = u.user_id');
		$this->db->where('u.email', $username);
        $this->db->where('u.password', md5($password));
		
        // Run the query
        $query = $this->db->get();
        
        // Let's check if there are any results
        if($query->num_rows() == 1)
        {
            // If there is a user, then create session data
            $row = $query->row();
            $data = array(
                    'user_id' => $row->user_id,
            		'comp_id' => $row->comp_id,
            		'access' => $row->acc_id,
            		'full_name' => $row->full_name,
                    'user_name' => $row->user_name,
                    'email' => $row->email,
            		'transcriber' => $row->transcriber,
                    'validated' => true
                    );
            $this->session->set_userdata($data);
            return true;
        }
        // If the previous process did not validate
        // then return false.
        return false;
    }
	
    /*
     * @author:	Muhammad Sajid
     * @name:	get_users
     */
    public function get_users($comp_id, $access=null)
    {
    	if ($access == null || $access == 'null'){
    		$this->db->where('uc.acc_id >', COMP_ADMIN);
    	} else {
    		$this->db->where('uc.acc_id', $access);
    	}

    	$this->db->from('users u');
		$this->db->join('user_companies uc', 'uc.user_id = u.user_id');
		$this->db->where('uc.comp_id', $comp_id);
		
		$result = $this->db->get()->result();
		return $result;
    }
    
	/*
	 * @author:	Muhammad Sajid
	 * @name:	get_teams
	 */
    public function get_teams($comp_id)
    {
    	if (!empty($comp_id))
    	{
    		$this->db->select('t.team_id');
    		$this->db->select('t.team_title');
    		$this->db->from('teams t');
    		$this->db->join('team_map tm', 't.team_id = tm.team_id', 'left');
    		$this->db->where('tm.comp_id', $comp_id);
    		$this->db->group_by('tm.team_id');
    		$teams = $this->db->get()->result();
    		return $teams;
    	} else {
    		return 0;
    	}
    }
	
	
	/*
	 * @name:	if_exists
	 * 1- Check if user exists w.r.t email_id (while adding new user)
	 * 2- Check if user exists w.r.t email_id but not
	 * having specified user_id (while editing existing user)
	 */
	/*public function if_exists($email, $userId = FALSE)
	{
		if ( $user_id === FALSE )
		{
			$query = $this->db->get_where('users', array('email' => $email));
			
		} else {
			
			$query = $this->db->query("SELECT fname FROM users WHERE email_id = '$email_id' && user_id != $user_id");
		}
		
		return $query->row_array();
	}*/
	
	/*
	 * @name:	get_all_where
	 */
	/*public function get_all_where($where)
	{
		$query = $this->db->query("SELECT * FROM users WHERE $where");
		return $query->result_array();
	}*/
    
    public function getUsers( $comp_id="" )
    {
    	$data =$this->db->query("SELECT u.user_id,u.status,u.full_name,u.user_name,u.email, uc.user_pin, GROUP_CONCAT(uc.acc_id) AS acc_id
    							FROM users u LEFT JOIN user_companies uc ON u.user_id=uc.user_id
    							WHERE uc.comp_id={$comp_id} AND uc.acc_id >".COMP_ADMIN." GROUP BY u.user_id ")->result();
    	return $data;
    }
    
    public function getAccessList()
    {
    	$data = $this->db->get_where('access_levels', array('acc_id >'=>COMP_ADMIN))->result();
    	return $data;
    }
    
    public function checkUser($comp_id,$user_email)
    {
    	$this->db->from('users u');
    	$this->db->join('user_companies uc', 'uc.user_id = u.user_id');
    	$this->db->where('uc.comp_id', $comp_id);
    	$this->db->where('u.email', $user_email);
    	//	$this->db->where('u.user_pin', $user_pin);
    	$return = $this->db->get('users')->row_array();
    	
    	return $return;
    }
    
    public function addUser( $insert_agent =array())
    {
    	$this->db->insert('users', $insert_agent);
    	$insert_id = $this->db->insert_id();
    	return $insert_id;
    }
    
    public function addUserComp($insert_id,$accessArr , $comp_id,$user_pin="" )
    {
    	# insert into user_companies
    	foreach ($accessArr as $access)
    	{
    		$insert_uc['user_id'] = $insert_id;
    		$insert_uc['comp_id'] = $comp_id;
    		$insert_uc['acc_id'] = $access;
    		$insert_uc['user_pin'] = $user_pin;
    		$this->db->insert('user_companies', $insert_uc);
    	
    	
    		# insert into dashboard
    		$db_query = "SELECT c.camp_name, u.user_id, u.full_name, s.total_score
			    		FROM surveys s
			    		JOIN campaigns c ON s.camp_id = c.camp_id
			    		JOIN users u ON s.user_id = u.user_id
			    		WHERE s.user_id = $insert_id AND s.total_score > 0
			    		ORDER BY c.camp_name";
    		$insert_dashboard['user_id'] = $insert_id;
    		$insert_dashboard['comp_id'] = $comp_id;
    		$insert_dashboard['acc_id'] = $access;
    		$insert_dashboard['db_type'] = 'default';
    		$insert_dashboard['db_query'] = $db_query;
    		$this->db->insert('dashboards', $insert_dashboard);
    	}
    }
    
    public function add($user_id, $comp_id,$accessArr=array(),$user_pin)
    {
	    # insert into user_companies
	    foreach ($accessArr as $access)
	    {
		    $insert_uc['user_id'] = $user_id;
		    $insert_uc['comp_id'] = $comp_id;
		    $insert_uc['acc_id'] = $access;
	    	$insert_uc['user_pin'] = $user_pin;
    		$this->db->insert('user_companies', $insert_uc);
	    
	    
	    				# insert into dashboard
	    $db_query = "SELECT c.camp_name, u.user_id, u.full_name, s.total_score
					    FROM surveys s
					    JOIN campaigns c ON s.camp_id = c.camp_id
					    JOIN users u ON s.user_id = u.user_id
					    WHERE s.user_id = $insert_id AND s.total_score > 0
					    ORDER BY c.camp_name";
	    $insert_dashboard['user_id'] = $user_id;
	    $insert_dashboard['comp_id'] = $comp_id;
    		$insert_dashboard['acc_id'] = $access;
		$insert_dashboard['db_type'] = 'default';
    					$insert_dashboard['db_query'] = $db_query;
    					$this->db->insert('dashboards', $insert_dashboard);
	    }
	    return 1;
    }
    
    public function delete($agent_id,$comp_id,$statusUpdate)
    {
    	$this->db->where('user_id', $agent_id);
    	//$this->db->where('comp_id', $comp_id);
    	$this->db->update('users', array('status' => $statusUpdate));
    	
    }
    
	
}